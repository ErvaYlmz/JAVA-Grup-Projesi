package maze_of_words;

import java.awt.*;

public class Medium {
    int [][] lab1=new int [20][40];
  int row,col=0;
  int rowNum=20;
  int colNum=40;
  int blockW=35;
  int blockH=35;
  int num=35;
    
    
    public void paint( Graphics graph){
    
    int [][] maze =getMaze();
    for(row=0;row<rowNum;row++){
        for(col=0;col<colNum;col++){
            switch (maze[row][col]) {
                case 1 -> {
                    graph.setColor(Color.blue);
                    graph.fillRect(col*num, row*num, blockW, blockH);
                    graph.setColor(Color.black);
                    graph.drawRect(col*num, row*num, blockW, blockH);
                }
                case 2 -> {
                    graph.setColor(Color.yellow);
                    graph.fillRect(col*num, row*num, blockW, blockH);
                    graph.setColor(Color.black);
                    graph.drawRect(col*num, row*num, blockW, blockH);
                }
                default -> {
                    graph.setColor(Color.LIGHT_GRAY);
                    graph.fillRect(col*num, row*num, blockW, blockH);
                    graph.setColor(Color.black);
                    graph.drawRect(col*num, row*num, blockW, blockH);
                }
            }
}
    }
    
    //graph.drawString("start", 5, 60);
    //graph.drawString("end",850,460);
    
 }
    

    public int[][] getMaze() {
        
     int maze[][]={
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,2},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,2},
        {0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2},
        {0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
        {0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,1,1,0},
        {0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0},
        {1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,0,0,0},
        {0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
     };
       
     lab1=maze;
     return lab1; 
    }
    
    public boolean canMove(int row, int col, int direction){
        switch (direction) {
            case 38 -> {
                return lab1[row-1][col]!=1;
            }
            case 40 -> {
                return lab1[row+1][col]!=1;
            }
            case 37 -> {
                return lab1[row][col-1]!=1;
            }
            case 39 -> {
                return lab1[row][col+1]!=1;
            }
            default -> {
            }
        }
        return false;
    }
    
     
}
